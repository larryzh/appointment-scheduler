import { supabase } from './supabaseClient';

export async function setupDatabase() {
  console.log('Starting database setup...');

  try {
    // Create users table
    const { error: usersError } = await supabase.rpc('create_users_table');
    if (usersError) {
      console.error('Error creating users table:', usersError);
    }

    // Create groups table
    const { error: groupsError } = await supabase.rpc('create_groups_table');
    if (groupsError) {
      console.error('Error creating groups table:', groupsError);
    }

    // Create lists table
    const { error: listsError } = await supabase.rpc('create_lists_table');
    if (listsError) {
      console.error('Error creating lists table:', listsError);
    }

  } catch (error) {
    console.error('Error during database setup:', error);
  }

  console.log('Database setup completed');
}

/*
Run this SQL in the Supabase SQL Editor:

-- Function to create the users table
create or replace function create_users_table()
returns void
language plpgsql
security definer
as $$
begin
  create table if not exists public.users (
    id bigint primary key generated by default as identity,
    email text unique not null,
    password text not null,
    user_type text not null check (user_type in ('host', 'visitor')),
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
  );

  alter table public.users enable row level security;
  
  create policy "Users are viewable by everyone" on users for select using (true);
  create policy "Anyone can create a user" on users for insert with check (true);
end;
$$;

-- Function to create the groups table
create or replace function create_groups_table()
returns void
language plpgsql
security definer
as $$
begin
  create table if not exists public.groups (
    id bigint primary key generated by default as identity,
    user_id bigint references public.users not null,
    name text not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
  );

  alter table public.groups enable row level security;
  
  create policy "Groups are viewable by everyone" on groups for select using (true);
  create policy "Users can insert their own groups" on groups for insert with check (true);
  create policy "Users can update their own groups" on groups for update using (true);
  create policy "Users can delete their own groups" on groups for delete using (true);
end;
$$;

-- Function to create the lists table
create or replace function create_lists_table()
returns void
language plpgsql
security definer
as $$
begin
  create table if not exists public.lists (
    id bigint primary key generated by default as identity,
    group_id bigint references public.groups not null,
    name text not null,
    position integer not null default 0,
    symbols jsonb[] default array[]::jsonb[],
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
  );

  create index if not exists idx_lists_position on public.lists(position);
  create index if not exists idx_lists_group_id on public.lists(group_id);

  alter table public.lists enable row level security;
  
  create policy "Lists are viewable by everyone" on lists for select using (true);
  create policy "Users can insert lists" on lists for insert with check (true);
  create policy "Users can update lists" on lists for update using (true);
  create policy "Users can delete lists" on lists for delete using (true);
end;
$$;

-- Execute the functions
select create_users_table();
select create_groups_table();
select create_lists_table();
*/
